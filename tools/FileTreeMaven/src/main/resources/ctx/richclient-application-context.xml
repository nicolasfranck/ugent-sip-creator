<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
  xmlns:util="http://www.springframework.org/schema/util">


  <!--
    The application context is used to configure components and services within
    the platform.  The platform utilizes a number of services at runtime, and
    these must be configured here.  The two key beans for this are the serviceLocator
    and applicationServices.  Many of the services have reasonable default
    implementations, meaning that you probably won't need to define them here
    unless you have specific needs not addressed in the default implementation.

    Beyond the services, you will define the various components that make up
    your application, like the application descriptor, views, lifecycle advisor,
    validation rules, etc.

    This may look a little daunting at first, but hang in there.  The good news
    is that you don't have to change many of the bean configurations provided
    here when you are setting up your application.

    Typically, you would change the following:

    1. The startingPageId on the lifecycleAdvisor.
    2. The eventExceptionHandler on the lifecycleAdvisor (or remove it if you
    don't want to use it).
    3. Specify the location of your resource bundle in the messageSource.
    4. Specify the mapping properties files for images in imageResourcesFactory.
    5. Specify your rulesSource class, if you're using one.
    6. Configure your view beans.
  -->

  <!--
    Bean: application
    Usage: Platform required
    Description: This defines the singleton application instance to be used.
    Note that, currently, this object is not pluggable.  You must use the
    class specified below and configure it as needed.
  -->
  <bean id="application" class="org.springframework.richclient.application.Application">
    <constructor-arg index="0" ref="applicationDescriptor" />
    <constructor-arg index="1" ref="lifecycleAdvisor" />
  </bean>

  <!--
    Bean: lifecycleAdvisor
    Type: user named
    Usage: required
    Description: This defines the LifecycleAdvisor instance to be used by the
    Application.  Note the reference to this bean in the constructor
    args in the application bean.  If you don't need any special handling
    in the application lifecycle, then you could use the provided default
    advisor in
    org.springframework.richclient.application.config.DefaultApplicationLifecycleAdvisor

    Two key properties must be configured, the location of the file containing
    the command definitions for application windows and the bean id of the
    page that should be displayed initially upon application startup, you
    can find the referenced view bean toward the bottom of this file.

    An optional, but highly recommended, property you can set is the
    eventExceptionHandler.  If specified, this will be registered with the
    AWT event thread as the handler to receive uncaught exceptions that occur
    on the event thread.
  -->
  <bean id="lifecycleAdvisor" class="ugent.bagger.app.SimpleLifecycleAdvisor">
    <property name="windowCommandBarDefinitions" value="ui/commands-context.xml" />
    <property name="windowCommandManagerBeanName" value="windowCommandManager" />
    <property name="menubarBeanName" value="menuBar" />
    <!--<property name="toolbarBeanName" value="toolBar" />-->
    <property name="startingPageId" value="renameView" />
    <property name="registerableExceptionHandler" ref="exceptionHandler" />
  </bean>

  <!--
    Bean: serviceLocator
    Usage: Platform required
    Description: This defines the singleton application service locator instance.
    This is a trivial singleton object providing access to the configured
    services, as specified on the applicationServices property.
  -->
  <bean id="serviceLocator" class="org.springframework.richclient.application.ApplicationServicesLocator">
    <property name="applicationServices" ref="applicationServices" />
  </bean>

  <!--
    Bean: applicationServices
    Usage: Platform required (unless you set this up programmatically)
    Description: This configures the application services available to the platform.
    There are specific setter methods for all the standard services, see the
    javadoc on the DefaultApplicationServices class for more details.
    NOTE: The use of bean ids (idref) is preferred over using direct bean
    references to avoid startup problems with circular references.
  -->
  <bean id="applicationServices"
    class="org.springframework.richclient.application.support.DefaultApplicationServices">
    <property name="imageSourceId">
      <idref bean="imageSource" />
    </property>
    <property name="formComponentInterceptorFactoryId">
      <idref bean="formComponentInterceptorFactory" />
    </property>
    <property name="applicationObjectConfigurerId">
      <idref bean="applicationObjectConfigurer" />
    </property>
  </bean>

  <!--
    Bean: applicationEventMulticaster
    Type: magic
    Usage: platform required
    Description: This defines the object responsible for dispatching application events
    to all interested components.  Unless you really know what you're doing,
    you should just include this as is.
  -->
  <bean id="applicationEventMulticaster"
    class="org.springframework.context.event.SimpleApplicationEventMulticaster" />

  <!--
    Bean: applicationDescriptor
    Usage: platform required
    Description: This defines the Application metadata to be used by the
    Application.  Note the reference to this bean in the constructor
    args in the application bean.
  -->
  <bean id="applicationDescriptor"
    class="org.springframework.richclient.application.support.DefaultApplicationDescriptor">
    <property name="version" value="0.1" />
    <property name="buildId" value="20080616" />
  </bean>

  <!--
    Bean: applicationObjectConfigurer
    Usage: platform required (because it is a bean post processor)
    Description: This defines the object responsible for configuring other objects
    constructed via the platform.  This is a critical part of the I18N support.
  -->
  <bean id="applicationObjectConfigurer" depends-on="serviceLocator"
    class="org.springframework.richclient.application.config.DefaultApplicationObjectConfigurer">
  </bean>

  <!--
    Bean: lookAndFeelConfigurer
    Usage: platform optional
    Description: The platform doesn't specifically make direct use of this
    object (other than instantiating it).  It is expected that the object
    will register itself into the UI Manager when it is instantiated in
    the context.  Take a look at the JGoodiesLooksConfigurer class for an
    example of this.
  -->
  <bean id="lookAndFeelConfigurer"
    class="org.springframework.richclient.application.config.JGoodiesLooksConfigurer">
    <property name="popupDropShadowEnabled" value="false" />
    <property name="theme">
      <bean class="com.jgoodies.looks.plastic.theme.ExperienceBlue" />
    </property>
  </bean>

  <!--
    Bean: messageSource
    Usage: platform required (not really, but you can't do much without it)
    Description: This specifies the component that is responsible for providing
    messages (all kinds of text) to the platform.  This is a critical piece
    of the I18N support.  Unless your doing something very unusual, the
    ResourceBundleMessageSource used below should be sufficient.  Just
    configure it with the base names of the resource bundles you want to
    use in your application.  Unless you want to override the default
    text resources for the platform, you should include
    org.springframework.richclient.application.messages as the last base name.
  -->
  <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basenames">
      <list>
        <value>ui.messages</value>
        <value>org.springframework.richclient.application.messages</value>
      </list>
    </property>
  </bean>

  <!--
    Bean: imageResourcesFactory
    Usage: platform required (if you are using the DefaultImageSource, see below)
    Description: This specifies the component that is responsible for providing
    image resources locations.  This factory uses the specified properties
    files to map image resource keys to image locations.
  -->
  <bean id="imageResourcesFactory" class="org.springframework.context.support.ResourceMapFactoryBean">
    <property name="locations">
      <list>
        <value>classpath:org/springframework/richclient/image/images.properties</value>
        <value>classpath:images/images.properties</value>
      </list>
    </property>
  </bean>

  <!--
    Bean: imageSource
    Usage: platform required
    Description: This specifies the component that is responsible for providing
    images to the platform.  It makes use of a resource factory that converts
    the image keys to resource locations.  The DefaultImageSource also provides
    a "broken image" image for any requested image that can't be found or fails
    to load.
  -->
  <bean id="imageSource" class="org.springframework.richclient.image.DefaultImageSource">
    <constructor-arg index="0" ref="imageResourcesFactory" />
    <property name="brokenImageIndicator" value="/org/springframework/richclient/images/alert/error_obj.gif" />
  </bean>

  <!--
    Bean: formComponentInterceptorFactory
    Usage: platform optional
    Description: This specifies the list of interceptors to attach to controls
    constructed by the platform.  This allows for a declarative model for
    specifying "additional" functionality to be added to various components.
    The configuration below adds interceptors to overlay validation error
    images and background color changes, provide popup menus in text fields,
    and autocompletion (as you type) for comboboxes.
  -->
  <bean id="formComponentInterceptorFactory"
    class="org.springframework.richclient.form.builder.support.ChainedInterceptorFactory">
    <property name="interceptorFactories">
      <list>
        <bean class="org.springframework.richclient.form.builder.support.ColorValidationInterceptorFactory">
          <property name="errorColor" value="255,245,245" />
        </bean>
        <bean class="org.springframework.richclient.form.builder.support.OverlayValidationInterceptorFactory" />
        <bean class="org.springframework.richclient.text.TextComponentPopupInterceptorFactory" />
        <bean class="org.springframework.richclient.list.ComboBoxAutoCompletionInterceptorFactory" />
      </list>
    </property>
  </bean>
  
   <bean id="renameView" class="org.springframework.richclient.application.docking.vldocking.VLDockingViewDescriptor">
    <property name="viewClass" value="ugent.bagger.views.RenameView" />
    <property name="autoHideEnabled" value="true" />
     <property name="floatEnabled" value="true" />
     <property name="maximizeEnabled" value="true"/>    
  </bean>

<!--
  <bean id="bagItView" class="org.springframework.richclient.application.docking.vldocking.VLDockingViewDescriptor">
    <property name="viewClass" value="ugent.bagger.views.BagItView" />
    <property name="autoHideEnabled" value="true" />
     <property name="floatEnabled" value="true" />
     <property name="maximizeEnabled" value="true"/>
     <property name="viewProperties">
         <map>
             <entry key="xsdMap" value-ref="xsdMap" />             
         </map>
     </property>
  </bean>
  -->
  
  <bean id="metsView" class="org.springframework.richclient.application.docking.vldocking.VLDockingViewDescriptor">
    <property name="viewClass" value="ugent.bagger.views.MetsView" />
    <property name="autoHideEnabled" value="true" />
     <property name="floatEnabled" value="true" />
     <property name="maximizeEnabled" value="true"/>      
     <property name="viewProperties">         
         <map>             
             <entry key="metsSchemaVersions" value-ref="metsSchemaVersions" />
             <entry key="metsSchemaURLS" value-ref="metsSchemaURLS" />
         </map>
     </property>
  </bean>
  
    <util:list id="metsSchemaURLS">        
        <value>http://www.loc.gov/METS/</value>
    </util:list>
    <!--mets does not register 'versions' in its namespace, so we try it this way: 1st? => 2th? => 3th? ..-->
    <util:list id="metsSchemaVersions">
        <value>metadata/xsd/mets/1.9.1/mets-1.9.1.xsd</value>
        <value>metadata/metadata/xsd/mets/1.9/mets-1.9.xsd</value>
        <value>metadata/metadata/xsd/mets/1.8/mets-1.8.xsd</value>
        <value>metadata/xsd/mets/1.7/mets-1.7.xsd</value>
        <value>metadata/xsd/mets/1.6/mets-1.6.xsd</value>
        <value>metadata/xsd/mets/1.5/mets-1.5.xsd</value>
        <value>metadata/xsd/mets/1.4/mets-1.4.xsd</value>
        <value>metadata/xsd/mets/1.3/mets-1.3.xsd</value>
        <value>metadata/xsd/mets/1.2/mets-1.2.xsd</value>
        <value>metadata/xsd/mets/1.1/mets-1.1.xsd</value>
    </util:list>
    
    <util:list id="forbiddenNamespaces">
        <value>http://www.loc.gov/METS/</value>               
    </util:list>
    <util:map id="namespaceMap">
        <entry key="http://www.loc.gov/MARC21/slim" value="MARC"  />
        <entry key="http://www.loc.gov/mods/v3" value="MODS" />
        
        <entry key="info:lc/xmlns/premis-v2" value="PREMIS" />
        <entry key="http://www.loc.gov/standards/premis/v1" value="PREMIS" />
        <entry key="http://www.loc.gov/standards/premis" value="PREMIS" />                     
        
        <entry key="urn:isbn:1-931666-22-9" value="EAD" />
        <entry key="http://www.loc.gov/METS/" value="METS" />           
        <entry key="http://purl.org/dc/elements/1.1/" value="DC" />         
        <entry key="http://www.loc.gov/mix/v20" value="NISOIMG" />
        <entry key="http://www.loc.gov/mix/v10" value="NISOIMG" />
        <entry key="http://www.loc.gov/AMD/" value="LC-AV" />
        <entry key="http://www.loc.gov/VMD/" value="LC-AV" />
        <entry key="http://www.vraweb.org/vracore4.htm" value="VRA" />
        <!---->
        <!-- DDI wat onduidelijk: onnoemelijk veel schema's die aan elkaar gekoppeld zijn.. -->
        <!--FGDC => heeft geen namespace: http://lab.usgin.org/groups/etl-debug-blog/fgdc-xml-schema-woes-->
        <entry key="http://ltsc.ieee.org/xsd/LOM" value="LOM" />
        <entry key="http://www.tei-c.org/ns/1.0" value="TEIHDR" />
        <entry key="http://cosimo.stanford.edu/sdr/metsrights/" value="METSRIGHTS" />
        
        <!--ISO 19115:2003 NAP => xsd niet gevonden -->
    </util:map>
    
    <util:map id="xsdMap">
        <entry key="http://www.loc.gov/MARC21/slim" value="metadata/xsd/MARC21.xsd" />
        <entry key="http://www.loc.gov/mods/v3" value="metadata/xsd/mods.xsd" />        
        <entry key="info:lc/xmlns/premis-v2" value="metadata/xsd/premis.xsd" />        
        <entry key="urn:isbn:1-931666-22-9" value="metadata/xsd/ead.xsd" />
        <entry key="urn:ebu:metadata-schema:ebupmeta_2011" value="metadata/xsd/EBU_PMETA_2011.xsd" />
        <entry key="http://www.getty.edu/CDWA/CDWALite" value="metadata/xsd/CDWALite-xsd-public-v1-1.xsd" />
        <entry key="http://www.openarchives.org/OAI/2.0/oai_dc/" value="http://www.openarchives.org/OAI/2.0/oai_dc.xsd" />
        <entry key="http://purl.org/dc/elements/1.1/" value="metadata/xsd/dc.xsd" />
        <entry key="http://www.loc.gov/mix/v20" value="metadata/xsd/mix20.xsd" />
        <entry key="http://www.loc.gov/mix/v10" value="metadata/xsd/mix10.xsd" />        
        <entry key="http://www.loc.gov/AMD/" value="metadata/xsd/AMD.xsd" />
        <entry key="http://www.loc.gov/VMD/" value="metadata/xsd/VMD.xsd" />
        <entry key="http://www.vraweb.org/vracore4.htm" value="metadata/xsd/vra.xsd" />
        <entry key="http://ltsc.ieee.org/xsd/LOM" value="http://ltsc.ieee.org/xsd/lomv1.0/lom.xsd" />        
        <entry key="info:lc/xmlns/premis-v2" value="metadata/xsd/premis/premis-2-2.xsd" />
        <entry key="http://www.loc.gov/standards/premis/v1" value="metadata/xsd/premis/premis-1-1.xsd" />
        <entry key="http://www.loc.gov/standards/premis" value="metadata/xsd/premis/premis-1-1.xsd" />        
        <!--premis agent|object|event|rights hebben allemaal dezelfde namespace: http://www.loc.gov/standards/premis -->        
        <entry key="http://www.tei-c.org/ns/1.0" value="metadata/xsd/tei_all.xsd" />
        <entry key="http://www.ivoa.net/xml/Spectrum/Spectrum-1.01.xsd" value="metadata/xsd/Spectrum-1.01.xsd" />
        <entry key="http://cosimo.stanford.edu/sdr/metsrights/" value="metadata/xsd/METSRights.xsd" />
    </util:map>
    <util:map id="xsltMap">
        <entry key="http://www.loc.gov/MARC21/slim" value="metadata/xslt/marc2oai_dc.xsl" />
        <entry key="http://www.loc.gov/mods/v3" value="metadata/xslt/MODS3-22OAIDC.xsl" />        
    </util:map>    


<bean id="exceptionHandler"
    class="org.springframework.richclient.exceptionhandling.delegation.DelegatingExceptionHandler">
    <property name="delegateList">
      <list>
        <bean
          class="org.springframework.richclient.exceptionhandling.delegation.SimpleExceptionHandlerDelegate">
          <property name="throwableClass" value="java.lang.Error" />
          <property name="exceptionHandler">
            <bean class="org.springframework.richclient.exceptionhandling.MessagesDialogExceptionHandler">
              <property name="logLevel" value="DEBUG" />
              <property name="shutdownPolicy" value="OBLIGATE" />
            </bean>
          </property>
        </bean>

        <!-- The order is important: if Throwable would be first then the others would be ignored -->

        <bean
          class="org.springframework.richclient.exceptionhandling.delegation.SimpleExceptionHandlerDelegate">
          <property name="throwableClass" value="java.lang.Throwable" />
          <property name="exceptionHandler">
            <bean class="org.springframework.richclient.exceptionhandling.MessagesDialogExceptionHandler">
              <property name="logLevel" value="DEBUG" />
              <property name="shutdownPolicy" value="ASK" />
            </bean>
          </property>
        </bean>
      </list>
    </property>
  </bean>


  <!--
    <bean id="exceptionHandler" class="org.springframework.richclient.exceptionhandling.SilentExceptionHandler">
        <property name="logLevel" value="DEBUG"/>        
    </bean>
    -->

  <!--<bean id="rulesSource" class="test.MyValidationRulesSource" />-->
  
  <bean id="rulesSource" class="ugent.bagger.validation.MyValidationRulesSource" />

  <bean class="org.springframework.richclient.form.builder.support.ToolTipInterceptorFactory" />

</beans>